pub fn map<'lifetime>() -> [&'lifetime str; 256]{
    
    let map: [&str; 256] = 
    [
        "#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#",
        "#",".",".",".",".",".",".",".",".",".",".",".",".",".",".","#",
        "#",".",".",".",".",".",".",".",".",".",".",".",".",".",".","#",
        "#",".",".",".",".",".",".",".",".",".",".",".",".",".",".","#",
        "#",".",".",".",".",".",".",".",".",".",".",".",".",".",".","#",
        "#",".",".",".",".",".",".",".",".",".",".",".",".",".",".","#",
        "#",".",".",".",".",".",".",".",".",".",".",".",".",".",".","#",
        "#",".",".",".",".",".",".",".",".",".",".",".",".",".",".","#",
        "#",".",".",".",".",".",".",".",".",".",".",".",".",".",".","#",
        "#",".",".",".",".",".",".",".",".",".",".",".",".",".",".","#",
        "#",".",".",".",".",".",".",".",".",".",".",".",".",".",".","#",
        "#",".",".",".",".",".",".",".",".",".",".",".",".",".",".","#",
        "#",".",".",".",".",".",".",".",".",".",".",".",".",".",".","#",
        "#",".",".",".",".",".",".",".",".",".",".",".",".",".",".","#",
        "#",".",".",".",".",".",".",".",".",".",".",".",".",".",".","#",
        "#","#","#","#","#","#","#","#","#","#","#","#","#","#","#","#"
    ];

    return map;
    
}

pub fn set_fov(FOV: i32) -> f32{
    return 3.141592 / FOV as f32;
}